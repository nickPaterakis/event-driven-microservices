server:
  port: 8085

reservation-service:
  database:
    mongo:
      host: localhost
      port: 27017
  kafka:
    bootstrap-servers: localhost:9092
    reservation-event-topic-name: Booking.Reservation_Service.Reservation
    property-event-topic-name: Booking.Property_Service.Property
  outbox:
    outbox-scheduler-fixed-rate: 10000
    outbox-scheduler-initial-delay: 10000

spring:
  application:
    name: reservation-service
  data:
    mongodb:
      host: ${reservation-service.database.mongo.host}
      port: ${reservation-service.database.mongo.port}
      database: ReservationService

kafka-config:
  bootstrap-servers: ${reservation-service.kafka.bootstrap-servers}
  schema-registry-url-key: schema.registry.url
  schema-registry-url: http://localhost:8081
  num-of-partitions: 1
  replication-factor: 1

kafka-producer-config:
  key-serializer-class: org.apache.kafka.common.serialization.StringSerializer
  value-serializer-class: org.springframework.kafka.support.serializer.JsonSerializer
  compression-type: snappy
  acks: all
  batch-size: 16384
  batch-size-boost-factor: 100
  linger-ms: 5
  request-timeout-ms: 60000
  retry-count: 5

kafka-consumer-config:
  key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
  value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
  reservation-consumer-group-id: reservation-topic-consumer
  auto-offset-reset: earliest
  batch-listener: true
  auto-startup: true
  concurrency-level: 3
  session-timeout-ms: 10000
  heartbeat-interval-ms: 3000
  max-poll-interval-ms: 300000
  max-poll-records: 500
  max-partition-fetch-bytes-default: 1048576
  max-partition-fetch-bytes-boost-factor: 1
  poll-timeout-ms: 150

---
spring:
  config:
    activate:
      on-profile: docker

reservation-service:
  database:
    mongo:
      host: mongo
  kafka:
    bootstrap-servers: kafka:29092