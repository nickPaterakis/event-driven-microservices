server:
  port: 8088

property-service:
  gcp:
    bucket:
      name: booking-project
  database:
    mongo:
      host: localhost
      port: 27017
  kafka:
    reservation-event-topic-name: Booking.Reservation_Service.Reservation
    bootstrap-servers: localhost:9092

spring:
  application:
    name: property-service
  data:
    mongodb:
      host: ${property-service.database.mongo.host}
      port: ${property-service.database.mongo.port}
      database: PropertyService
  cloud:
    gcp:
      credentials:
        location: classpath:gcp-account-file.json


kafka-config:
  bootstrap-servers: ${property-service.kafka.bootstrap-servers}
  schema-registry-url-key: schema.registry.url
  schema-registry-url: http://localhost:8081
  num-of-partitions: 1
  replication-factor: 1

kafka-consumer-config:
  key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
  value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
  property-consumer-group-id: property-topic-consumer
  auto-offset-reset: earliest
  batch-listener: true
  auto-startup: true
  concurrency-level: 3
  session-timeout-ms: 10000
  heartbeat-interval-ms: 3000
  max-poll-interval-ms: 300000
  max-poll-records: 500
  max-partition-fetch-bytes-default: 1048576
  max-partition-fetch-bytes-boost-factor: 1
  poll-timeout-ms: 150

---
spring:
  config:
    activate:
      on-profile: prod

property-service:
  database:
    mongo:
      host: mongo
  kafka:
    bootstrap-servers: kafka:29092